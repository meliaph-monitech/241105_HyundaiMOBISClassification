# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MdotIyp_oESlSCTDFl_MbumOnh2ZpcDP
"""

import streamlit as st
import pandas as pd
import numpy as np
import joblib
import requests
import plotly.express as px
import plotly.graph_objects as go

# Function to load the model from GitHub
def load_model_from_github(url):
    response = requests.get(url)
    return joblib.load(io.BytesIO(response.content))

# Function to load and filter the CSV file
def load_and_filter_csv(file, filter_column='L/O', filter_threshold=0.4):
    df = pd.read_csv(file)
    df_filtered = df[df[filter_column] >= filter_threshold]
    return df_filtered[['NIR', 'VIS']]

# Function to segment the data
def segment_data(df_filtered, segment_size):
    return [df_filtered.iloc[i:i + segment_size] for i in range(0, len(df_filtered), segment_size)]

# Function to plot segments with predicted categories
def plot_segments(df_filtered, predictions, segment_size):
    fig_nir = go.Figure()
    fig_vis = go.Figure()

    unique_labels = np.unique(predictions)
    colors = px.colors.qualitative.Plotly
    color_map = {label: colors[i % len(colors)] for i, label in enumerate(unique_labels)}

    segment_starts = range(0, len(df_filtered), segment_size)

    for i, start in enumerate(segment_starts):
        end = min(start + segment_size, len(df_filtered))

        if end <= start:
            continue

        pred = predictions[i]
        color = color_map[pred]

        fig_nir.add_trace(go.Scatter(
            x=df_filtered.index[start:end],
            y=df_filtered['NIR'].iloc[start:end],
            mode='lines',
            line=dict(color=color),
            name=f'Segment {i + 1}: Class {pred}'
        ))

        fig_vis.add_trace(go.Scatter(
            x=df_filtered.index[start:end],
            y=df_filtered['VIS'].iloc[start:end],
            mode='lines',
            line=dict(color=color),
            name=f'Segment {i + 1}: Class {pred}'
        ))

        fig_nir.add_vline(x=df_filtered.index[start], line=dict(color='gray', dash='dash'),
                          annotation_text=f'Segment {i + 1}',
                          annotation_position='top right', annotation_font=dict(color='gray'))
        fig_vis.add_vline(x=df_filtered.index[start], line=dict(color='gray', dash='dash'),
                          annotation_text=f'Segment {i + 1}',
                          annotation_position='top right', annotation_font=dict(color='gray'))

    fig_nir.update_layout(title='NIR Signal Segmentation',
                          xaxis_title='Sample Index',
                          yaxis_title='NIR Value')
    fig_vis.update_layout(title='VIS Signal Segmentation',
                          xaxis_title='Sample Index',
                          yaxis_title='VIS Value')

    return fig_nir, fig_vis

# Streamlit App
st.title('Laser Welding Signal Classification')

# Load model from GitHub
model_url = 'https://github.com/meliaph-monitech/HyundaiMOBISClassification/raw/main/laser_welding_model.joblib'
model = load_model_from_github(model_url)

# Upload CSV file
uploaded_file = st.file_uploader("Upload your CSV file", type='csv')

if uploaded_file is not None:
    df_filtered = load_and_filter_csv(uploaded_file)
    st.write("Data Loaded and Filtered:")
    st.write(df_filtered)

    # Add slider for segment size
    segment_size = st.slider("Select Segment Size", min_value=1, max_value=10000, value=10000)

    # Segment the data and classify
    segments = segment_data(df_filtered, segment_size)
    predictions = [model.predict(np.array(list(extract_features(segment).values())).reshape(1, -1))[0] for segment in segments]

    # Plot the segments
    fig_nir, fig_vis = plot_segments(df_filtered, predictions, segment_size)

    # Show the figures
    st.plotly_chart(fig_nir)
    st.plotly_chart(fig_vis)
